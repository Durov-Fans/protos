// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.1
// source: creator/creator.proto

package creator

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CreatorService_CreateThing_FullMethodName = "/creator.CreatorService/CreateThing"
	CreatorService_GetThing_FullMethodName    = "/creator.CreatorService/GetThing"
)

// CreatorServiceClient is the client API for CreatorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CreatorServiceClient interface {
	CreateThing(ctx context.Context, in *CreateThingRequest, opts ...grpc.CallOption) (*CreateThingResponse, error)
	GetThing(ctx context.Context, in *GetThingRequest, opts ...grpc.CallOption) (*GetThingResponse, error)
}

type creatorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCreatorServiceClient(cc grpc.ClientConnInterface) CreatorServiceClient {
	return &creatorServiceClient{cc}
}

func (c *creatorServiceClient) CreateThing(ctx context.Context, in *CreateThingRequest, opts ...grpc.CallOption) (*CreateThingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateThingResponse)
	err := c.cc.Invoke(ctx, CreatorService_CreateThing_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creatorServiceClient) GetThing(ctx context.Context, in *GetThingRequest, opts ...grpc.CallOption) (*GetThingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetThingResponse)
	err := c.cc.Invoke(ctx, CreatorService_GetThing_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CreatorServiceServer is the server API for CreatorService service.
// All implementations must embed UnimplementedCreatorServiceServer
// for forward compatibility.
type CreatorServiceServer interface {
	CreateThing(context.Context, *CreateThingRequest) (*CreateThingResponse, error)
	GetThing(context.Context, *GetThingRequest) (*GetThingResponse, error)
	mustEmbedUnimplementedCreatorServiceServer()
}

// UnimplementedCreatorServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCreatorServiceServer struct{}

func (UnimplementedCreatorServiceServer) CreateThing(context.Context, *CreateThingRequest) (*CreateThingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateThing not implemented")
}
func (UnimplementedCreatorServiceServer) GetThing(context.Context, *GetThingRequest) (*GetThingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetThing not implemented")
}
func (UnimplementedCreatorServiceServer) mustEmbedUnimplementedCreatorServiceServer() {}
func (UnimplementedCreatorServiceServer) testEmbeddedByValue()                        {}

// UnsafeCreatorServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CreatorServiceServer will
// result in compilation errors.
type UnsafeCreatorServiceServer interface {
	mustEmbedUnimplementedCreatorServiceServer()
}

func RegisterCreatorServiceServer(s grpc.ServiceRegistrar, srv CreatorServiceServer) {
	// If the following call pancis, it indicates UnimplementedCreatorServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CreatorService_ServiceDesc, srv)
}

func _CreatorService_CreateThing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateThingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CreatorServiceServer).CreateThing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CreatorService_CreateThing_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CreatorServiceServer).CreateThing(ctx, req.(*CreateThingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CreatorService_GetThing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetThingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CreatorServiceServer).GetThing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CreatorService_GetThing_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CreatorServiceServer).GetThing(ctx, req.(*GetThingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CreatorService_ServiceDesc is the grpc.ServiceDesc for CreatorService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CreatorService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "creator.CreatorService",
	HandlerType: (*CreatorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateThing",
			Handler:    _CreatorService_CreateThing_Handler,
		},
		{
			MethodName: "GetThing",
			Handler:    _CreatorService_GetThing_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "creator/creator.proto",
}
